{%- set ddata = salt['mc_utils.json_load'](data) %}
{%- set cfg = ddata.cfg %}
{%- set data = ddata.cfg.data %}
{%- set dacls = data.get('acls', {})%}
{%- set default_acls = dacls.get('default', {}) %}
{%- set default_allowed = default_acls.get('allowed', {}) %}
{%- set default_denied = default_acls.get('denied', {}) %}
{%- set default_restricted = default_acls.get('restricted', {}) %}
{%- set readonlys_acls = dacls.get('readonlys', {}) %}
{%- set readonlys_allowed = readonlys_acls.get('allowed', {}) %}
{%- set readonlys_denied = readonlys_acls.get('denied', {}) %}
{%- set readonlys_restricted = readonlys_acls.get('restricted', {}) %}
{%- set sreadonlys_restricted = "|".join(readonlys_restricted).upper() %}
{%- set sreadonlys_denied = "|".join(readonlys_denied).upper() %}
{%- set sreadonlys_allowed = "|".join(readonlys_allowed).upper() %}
{%- set admins_acls = dacls.get('admins', {}) %}
{%- set admins_allowed = admins_acls.get('allowed', default_allowed) %}
{%- set admins_denied = admins_acls.get('denied', default_denied) %}
{%- set admins_restricted = admins_acls.get('restricted', default_restricted) %}
{%- set sadmins_restricted = "|".join(admins_restricted).upper() %}
{%- set sadmins_denied = "|".join(admins_denied).upper() %}
{%- set sadmins_allowed = "|".join(admins_allowed).upper() %}
{% macro restrict(userbase) %}
{%- set fl = data.htpasswd_base.format(cfg.name, userbase) %}
  auth_basic "ES - Restricted {{userbase}}";
  auth_basic_user_file "{{fl}}";
{% endmacro %}
{%- macro proxy_pass() %}
  # misc headers
  more_set_headers 'Access-Control-Allow-Origin: *';
  add_header 'Access-Control-Allow-Credentials' 'true';
  add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE';
  add_header 'Access-Control-Allow-Headers' 'Authorization,DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
  proxy_pass http://elasticsearch;
  proxy_redirect off;
{% endmacro %}
{% macro set_access(test,
                    denied, allowed, restricted,
                    admin_handler, auth_handler, pass_handler) %}
  # by default we restrict access to AUTHed users
  set $acltest "{{test}}";
  set $indexauth "r";
  # Denied verbs only allow global ES admins to connect to
  {%- if denied %}
  if ($acltest ~ "{{denied}}") {
    set $indexauth "d$indexauth";
  }
  {%- endif %}
  {%- if allowed %}
  if ($acltest ~ "{{allowed}}") {
    set $indexauth "a$indexauth";
  }
  {%- endif %}
  {%- if restricted %}
  if ($acltest ~ "{{restricted}}") {
    set $indexauth "r$indexauth";
  }
  {%- endif %}

  error_page 418 = @{{auth_handler}};
  error_page 419 = @{{admin_handler}};
  error_page 420 = @{{pass_handler}};

  # any other mismatch is auth restricted
  if ($indexauth ~ ".*d.*") {
    return 419;
  }
  if ($indexauth ~ ".*a.*") {
    return 420;
  }
  # thoses API endpoints are limited to admins
  if ($uri ~  ".*_(cluster|nodes).*") {
    return 419;
  }
  return 418;
{% endmacro %}
# by default, do not allow clear http traffic, & redirect to https
if ($scheme ~ "https") {
  set "$http_x_ssl" "1";
}
{% if data.get('ssl_protected', True) %}
if ($http_x_ssl != "1") {
  rewrite ^(.*)$ https://{{data.domain}}$1 permanent;
}
{% endif %}
# Restrictions per index
{%- for indexes in data.get('indexes', []) %}
{%- for i, idata in indexes.items() %}
{%- set iacls = idata.get('acls', {}) %}
{%- set index_allowed = iacls.get('allowed', default_allowed)%}
{%- set index_denied = iacls.get('denied', default_denied) %}
{%- set index_restricted = iacls.get('restricted', default_restricted)%}
{%- set sindex_allowed = "|".join(index_allowed).upper() %}
{%- set sindex_denied = "|".join(index_denied).upper() %}
{%- set sindex_restricted = "|".join(index_restricted).upper() %}
# Match readonlys urls
location ~* ^(/_search/?.*)$ {
  {{set_access("$request_method",
               sreadonlys_denied, sreadonlys_allowed, sreadonlys_restricted,
               "admins", "readonlys", "pass")}}
}
# Then per index/type urls
{% for j, jdata in idata.get('types', {}).items() %}
{%- set jacls = jdata.get('acls', {}) %}
{%- set typ_allowed = jacls.get('allowed', index_allowed) %}
{%- set typ_denied = jacls.get('denied', index_denied) %}
{%- set typ_restricted = jacls.get('restricted', index_restricted) %}
{%- set styp_allowed = "|".join(typ_allowed).upper() %}
{%- set styp_denied = "|".join(typ_denied).upper() %}
{%- set styp_restricted = "|".join(typ_restricted).upper() %}
# then eventually index urls
location ~* ^(/{{i}}/{{j}}/.*|/{{i}}/{{j}})$ {
  {{set_access("$request_method",
               styp_denied, styp_allowed, styp_restricted,
               "admins", "{0}___{1}_nginxauth".format(i, j), "pass")}}
}
location @{{i}}___{{j}}_nginxauth {
  {{restrict("{0}___{1}".format(i, j))}}
  {{proxy_pass()}}
}
{% endfor %}
# then eventually index urls
location ~* ^(/{{i}}/.*|/{{i}})$ {
  {{set_access("$request_method",
                sindex_denied, sindex_allowed, sindex_restricted,
                "admins", "{0}_nginxauth".format(i), "pass")}}
}
location @{{i}}_nginxauth {
  {{restrict(i)}}
  {{proxy_pass()}}
}
{% endfor %}
{% endfor %}
# Any other non catched methods are restricted by the admin ACLS
location ~* /.*$ {
  {{set_access("$request_method",
               sadmins_denied, sadmins_allowed, sadmins_restricted,
               "admins", "admins", "pass")}}
}
# trick is to test the request and return an error code
# and handle the error code as a special proxypass where the
# userauth file will be dynamic
location @pass {
  {{proxy_pass()}}
}
location @readonlys {
  {{restrict('readonlys')}}
  {{proxy_pass()}}
}
location @admins {
  {{restrict('admins')}}
  {{proxy_pass()}}
}
